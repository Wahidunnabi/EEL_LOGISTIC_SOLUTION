//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LOGISTIC
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Logisticentities : DbContext
    {
        public Logisticentities()
            : base("name=Logisticentities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<AccVoucherType> AccVoucherTypes { get; set; }
        public DbSet<ChartOfAccount> ChartOfAccounts { get; set; }
        public DbSet<ChartOfAccountType> ChartOfAccountTypes { get; set; }
        public DbSet<VoucherDetail> VoucherDetails { get; set; }
        public DbSet<VoucherMaster> VoucherMasters { get; set; }
        public DbSet<Agent> Agents { get; set; }
        public DbSet<Bank> Banks { get; set; }
        public DbSet<CargoDetail> CargoDetails { get; set; }
        public DbSet<CargoRecieving> CargoRecievings { get; set; }
        public DbSet<ChartOfService> ChartOfServices { get; set; }
        public DbSet<ChartOfServiceCategory> ChartOfServiceCategories { get; set; }
        public DbSet<ClearAndForwadingAgent> ClearAndForwadingAgents { get; set; }
        public DbSet<ClientBillSetup> ClientBillSetups { get; set; }
        public DbSet<Commodity> Commodities { get; set; }
        public DbSet<CompanyInfo> CompanyInfoes { get; set; }
        public DbSet<Condition> Conditions { get; set; }
        public DbSet<Consignee> Consignees { get; set; }
        public DbSet<Container> Containers { get; set; }
        public DbSet<ContainerGrossWeight> ContainerGrossWeights { get; set; }
        public DbSet<ContainerSize> ContainerSizes { get; set; }
        public DbSet<ContainerType> ContainerTypes { get; set; }
        public DbSet<CPALocation> CPALocations { get; set; }
        public DbSet<CSDBillDetail> CSDBillDetails { get; set; }
        public DbSet<CSDBillSummary> CSDBillSummaries { get; set; }
        public DbSet<CSDContGateInOut> CSDContGateInOuts { get; set; }
        public DbSet<CSDGateInUPComing> CSDGateInUPComings { get; set; }
        public DbSet<CSDMonthlyBillProcessTrack> CSDMonthlyBillProcessTracks { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<Depot> Depots { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<ExportBill> ExportBills { get; set; }
        public DbSet<ExportBillDetail> ExportBillDetails { get; set; }
        public DbSet<ExportServiceDetail> ExportServiceDetails { get; set; }
        public DbSet<FormList> FormLists { get; set; }
        public DbSet<FreightForwarderAgent> FreightForwarderAgents { get; set; }
        public DbSet<Haulier> Hauliers { get; set; }
        public DbSet<IGMContGateInOut> IGMContGateInOuts { get; set; }
        public DbSet<IGMImport> IGMImports { get; set; }
        public DbSet<IGMImportDetail> IGMImportDetails { get; set; }
        public DbSet<ImpDetentionCharg> ImpDetentionChargs { get; set; }
        public DbSet<ImportBill> ImportBills { get; set; }
        public DbSet<ImportBillDetail> ImportBillDetails { get; set; }
        public DbSet<Importer> Importers { get; set; }
        public DbSet<ISOMapping> ISOMappings { get; set; }
        public DbSet<Location> Locations { get; set; }
        public DbSet<MoneyReceipt> MoneyReceipts { get; set; }
        public DbSet<MoneyReceiptDetail> MoneyReceiptDetails { get; set; }
        public DbSet<MoneyReceiptService> MoneyReceiptServices { get; set; }
        public DbSet<PatternConfig> PatternConfigs { get; set; }
        public DbSet<Port> Ports { get; set; }
        public DbSet<Service> Services { get; set; }
        public DbSet<ServiceDetail> ServiceDetails { get; set; }
        public DbSet<Shipper> Shippers { get; set; }
        public DbSet<Slab> Slabs { get; set; }
        public DbSet<Status> Status { get; set; }
        public DbSet<StuffingDetail> StuffingDetails { get; set; }
        public DbSet<sysdiagram> sysdiagrams { get; set; }
        public DbSet<tblDocumentstatu> tblDocumentstatus { get; set; }
        public DbSet<Trailer> Trailers { get; set; }
        public DbSet<TrailerNumber> TrailerNumbers { get; set; }
        public DbSet<TRReportData> TRReportDatas { get; set; }
        public DbSet<UnintOfMeasure> UnintOfMeasures { get; set; }
        public DbSet<UserInfo> UserInfoes { get; set; }
        public DbSet<UserPermissionMapping> UserPermissionMappings { get; set; }
        public DbSet<UserRole> UserRoles { get; set; }
        public DbSet<Vessel> Vessels { get; set; }
        public DbSet<view_csdGateInOut> view_csdGateInOut { get; set; }
        public DbSet<Vw_DISTINCTGATEENTRY_STUFFING> Vw_DISTINCTGATEENTRY_STUFFING { get; set; }
    
        public virtual int GetGateEntryPageWise(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetGateEntryPageWise", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual ObjectResult<SerachCSDGateInData_Result> SerachCSDGateInData(Nullable<int> searchBy, string searchText)
        {
            var searchByParameter = searchBy.HasValue ?
                new ObjectParameter("SearchBy", searchBy) :
                new ObjectParameter("SearchBy", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SerachCSDGateInData_Result>("SerachCSDGateInData", searchByParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<SerachCSDGateInOutData_Result> SerachCSDGateInOutData(Nullable<int> searchBy, string searchText)
        {
            var searchByParameter = searchBy.HasValue ?
                new ObjectParameter("SearchBy", searchBy) :
                new ObjectParameter("SearchBy", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SerachCSDGateInOutData_Result>("SerachCSDGateInOutData", searchByParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<SerachIGMGateInOutData_Result> SerachIGMGateInOutData(Nullable<int> searchBy, string searchText)
        {
            var searchByParameter = searchBy.HasValue ?
                new ObjectParameter("SearchBy", searchBy) :
                new ObjectParameter("SearchBy", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SerachIGMGateInOutData_Result>("SerachIGMGateInOutData", searchByParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<SerachIGMImportData_Result> SerachIGMImportData(Nullable<int> searchBy, string searchText)
        {
            var searchByParameter = searchBy.HasValue ?
                new ObjectParameter("SearchBy", searchBy) :
                new ObjectParameter("SearchBy", typeof(int));
    
            var searchTextParameter = searchText != null ?
                new ObjectParameter("SearchText", searchText) :
                new ObjectParameter("SearchText", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SerachIGMImportData_Result>("SerachIGMImportData", searchByParameter, searchTextParameter);
        }
    
        public virtual ObjectResult<EXPORT_EFRWiseBillDetails_Result> EXPORT_EFRWiseBillDetails(string eFRNO, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var eFRNOParameter = eFRNO != null ?
                new ObjectParameter("EFRNO", eFRNO) :
                new ObjectParameter("EFRNO", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EXPORT_EFRWiseBillDetails_Result>("EXPORT_EFRWiseBillDetails", eFRNOParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CompanyHead_Result> CompanyHead(Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CompanyHead_Result>("CompanyHead", fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<CSD_DateRange_FilterReport_Result> CSD_DateRange_FilterReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sortBy, string containerNo, Nullable<int> size, Nullable<int> type, Nullable<int> depotFrom, Nullable<int> depotTo, Nullable<int> trailerInId, Nullable<int> trailerOutId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var depotFromParameter = depotFrom.HasValue ?
                new ObjectParameter("DepotFrom", depotFrom) :
                new ObjectParameter("DepotFrom", typeof(int));
    
            var depotToParameter = depotTo.HasValue ?
                new ObjectParameter("DepotTo", depotTo) :
                new ObjectParameter("DepotTo", typeof(int));
    
            var trailerInIdParameter = trailerInId.HasValue ?
                new ObjectParameter("TrailerInId", trailerInId) :
                new ObjectParameter("TrailerInId", typeof(int));
    
            var trailerOutIdParameter = trailerOutId.HasValue ?
                new ObjectParameter("TrailerOutId", trailerOutId) :
                new ObjectParameter("TrailerOutId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_DateRange_FilterReport_Result>("CSD_DateRange_FilterReport", clientIdParameter, fromDateParameter, toDateParameter, sortByParameter, containerNoParameter, sizeParameter, typeParameter, depotFromParameter, depotToParameter, trailerInIdParameter, trailerOutIdParameter);
        }
    
        public virtual ObjectResult<CSD_DateRange_Inward_Movement_TopReport_Result> CSD_DateRange_Inward_Movement_TopReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sortBy, string containerNo, Nullable<int> size, Nullable<int> type, Nullable<int> depotFrom, Nullable<int> depotTo, Nullable<int> trailerInId, Nullable<int> trailerOutId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var depotFromParameter = depotFrom.HasValue ?
                new ObjectParameter("DepotFrom", depotFrom) :
                new ObjectParameter("DepotFrom", typeof(int));
    
            var depotToParameter = depotTo.HasValue ?
                new ObjectParameter("DepotTo", depotTo) :
                new ObjectParameter("DepotTo", typeof(int));
    
            var trailerInIdParameter = trailerInId.HasValue ?
                new ObjectParameter("TrailerInId", trailerInId) :
                new ObjectParameter("TrailerInId", typeof(int));
    
            var trailerOutIdParameter = trailerOutId.HasValue ?
                new ObjectParameter("TrailerOutId", trailerOutId) :
                new ObjectParameter("TrailerOutId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_DateRange_Inward_Movement_TopReport_Result>("CSD_DateRange_Inward_Movement_TopReport", clientIdParameter, fromDateParameter, toDateParameter, sortByParameter, containerNoParameter, sizeParameter, typeParameter, depotFromParameter, depotToParameter, trailerInIdParameter, trailerOutIdParameter);
        }
    
        public virtual ObjectResult<CSD_DateRange_Inward_MovementReport_Result> CSD_DateRange_Inward_MovementReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sortBy, string containerNo, Nullable<int> size, Nullable<int> type, Nullable<int> depotFrom, Nullable<int> depotTo, Nullable<int> trailerInId, Nullable<int> trailerOutId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var depotFromParameter = depotFrom.HasValue ?
                new ObjectParameter("DepotFrom", depotFrom) :
                new ObjectParameter("DepotFrom", typeof(int));
    
            var depotToParameter = depotTo.HasValue ?
                new ObjectParameter("DepotTo", depotTo) :
                new ObjectParameter("DepotTo", typeof(int));
    
            var trailerInIdParameter = trailerInId.HasValue ?
                new ObjectParameter("TrailerInId", trailerInId) :
                new ObjectParameter("TrailerInId", typeof(int));
    
            var trailerOutIdParameter = trailerOutId.HasValue ?
                new ObjectParameter("TrailerOutId", trailerOutId) :
                new ObjectParameter("TrailerOutId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_DateRange_Inward_MovementReport_Result>("CSD_DateRange_Inward_MovementReport", clientIdParameter, fromDateParameter, toDateParameter, sortByParameter, containerNoParameter, sizeParameter, typeParameter, depotFromParameter, depotToParameter, trailerInIdParameter, trailerOutIdParameter);
        }
    
        public virtual ObjectResult<CSD_DateRange_MovementReport_Result> CSD_DateRange_MovementReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sortBy, string containerNo, Nullable<int> size, Nullable<int> type, Nullable<int> depotFrom, Nullable<int> depotTo, Nullable<int> trailerInId, Nullable<int> trailerOutId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var depotFromParameter = depotFrom.HasValue ?
                new ObjectParameter("DepotFrom", depotFrom) :
                new ObjectParameter("DepotFrom", typeof(int));
    
            var depotToParameter = depotTo.HasValue ?
                new ObjectParameter("DepotTo", depotTo) :
                new ObjectParameter("DepotTo", typeof(int));
    
            var trailerInIdParameter = trailerInId.HasValue ?
                new ObjectParameter("TrailerInId", trailerInId) :
                new ObjectParameter("TrailerInId", typeof(int));
    
            var trailerOutIdParameter = trailerOutId.HasValue ?
                new ObjectParameter("TrailerOutId", trailerOutId) :
                new ObjectParameter("TrailerOutId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_DateRange_MovementReport_Result>("CSD_DateRange_MovementReport", clientIdParameter, fromDateParameter, toDateParameter, sortByParameter, containerNoParameter, sizeParameter, typeParameter, depotFromParameter, depotToParameter, trailerInIdParameter, trailerOutIdParameter);
        }
    
        public virtual ObjectResult<CSD_DateRange_OutWard_Movement_TopReport_Result> CSD_DateRange_OutWard_Movement_TopReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sortBy, string containerNo, Nullable<int> size, Nullable<int> type, Nullable<int> depotFrom, Nullable<int> depotTo, Nullable<int> trailerInId, Nullable<int> trailerOutId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var depotFromParameter = depotFrom.HasValue ?
                new ObjectParameter("DepotFrom", depotFrom) :
                new ObjectParameter("DepotFrom", typeof(int));
    
            var depotToParameter = depotTo.HasValue ?
                new ObjectParameter("DepotTo", depotTo) :
                new ObjectParameter("DepotTo", typeof(int));
    
            var trailerInIdParameter = trailerInId.HasValue ?
                new ObjectParameter("TrailerInId", trailerInId) :
                new ObjectParameter("TrailerInId", typeof(int));
    
            var trailerOutIdParameter = trailerOutId.HasValue ?
                new ObjectParameter("TrailerOutId", trailerOutId) :
                new ObjectParameter("TrailerOutId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_DateRange_OutWard_Movement_TopReport_Result>("CSD_DateRange_OutWard_Movement_TopReport", clientIdParameter, fromDateParameter, toDateParameter, sortByParameter, containerNoParameter, sizeParameter, typeParameter, depotFromParameter, depotToParameter, trailerInIdParameter, trailerOutIdParameter);
        }
    
        public virtual ObjectResult<CSD_DateRange_OutWard_MovementReport_Result> CSD_DateRange_OutWard_MovementReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sortBy, string containerNo, Nullable<int> size, Nullable<int> type, Nullable<int> depotFrom, Nullable<int> depotTo, Nullable<int> trailerInId, Nullable<int> trailerOutId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var depotFromParameter = depotFrom.HasValue ?
                new ObjectParameter("DepotFrom", depotFrom) :
                new ObjectParameter("DepotFrom", typeof(int));
    
            var depotToParameter = depotTo.HasValue ?
                new ObjectParameter("DepotTo", depotTo) :
                new ObjectParameter("DepotTo", typeof(int));
    
            var trailerInIdParameter = trailerInId.HasValue ?
                new ObjectParameter("TrailerInId", trailerInId) :
                new ObjectParameter("TrailerInId", typeof(int));
    
            var trailerOutIdParameter = trailerOutId.HasValue ?
                new ObjectParameter("TrailerOutId", trailerOutId) :
                new ObjectParameter("TrailerOutId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_DateRange_OutWard_MovementReport_Result>("CSD_DateRange_OutWard_MovementReport", clientIdParameter, fromDateParameter, toDateParameter, sortByParameter, containerNoParameter, sizeParameter, typeParameter, depotFromParameter, depotToParameter, trailerInIdParameter, trailerOutIdParameter);
        }
    
        public virtual ObjectResult<CSD_GateInChalan_Result> CSD_GateInChalan(Nullable<long> cSDID)
        {
            var cSDIDParameter = cSDID.HasValue ?
                new ObjectParameter("CSDID", cSDID) :
                new ObjectParameter("CSDID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_GateInChalan_Result>("CSD_GateInChalan", cSDIDParameter);
        }
    
        public virtual ObjectResult<CSD_GateOutChalan_Result> CSD_GateOutChalan(Nullable<long> cSDID)
        {
            var cSDIDParameter = cSDID.HasValue ?
                new ObjectParameter("CSDID", cSDID) :
                new ObjectParameter("CSDID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_GateOutChalan_Result>("CSD_GateOutChalan", cSDIDParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_DailyInwardMovementSummary_Result> CSD_MLO_DailyInwardMovementSummary(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sizeId, Nullable<int> typeId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_DailyInwardMovementSummary_Result>("CSD_MLO_DailyInwardMovementSummary", clientIdParameter, fromDateParameter, toDateParameter, sizeIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_DailyOutwardMovementSummary_Result> CSD_MLO_DailyOutwardMovementSummary(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> sizeId, Nullable<int> typeId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_DailyOutwardMovementSummary_Result>("CSD_MLO_DailyOutwardMovementSummary", clientIdParameter, fromDateParameter, toDateParameter, sizeIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_DailyStockSummary_Result> CSD_MLO_DailyStockSummary(Nullable<int> clientId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_DailyStockSummary_Result>("CSD_MLO_DailyStockSummary", clientIdParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_Wise_DailyReport_Result> CSD_MLO_Wise_DailyReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> typeName, Nullable<int> sizeId, Nullable<int> typeId)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeNameParameter = typeName.HasValue ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(int));
    
            var sizeIdParameter = sizeId.HasValue ?
                new ObjectParameter("SizeId", sizeId) :
                new ObjectParameter("SizeId", typeof(int));
    
            var typeIdParameter = typeId.HasValue ?
                new ObjectParameter("TypeId", typeId) :
                new ObjectParameter("TypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_Wise_DailyReport_Result>("CSD_MLO_Wise_DailyReport", clientIdParameter, fromDateParameter, toDateParameter, typeNameParameter, sizeIdParameter, typeIdParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_Wise_StockReport_Result> CSD_MLO_Wise_StockReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_Wise_StockReport_Result>("CSD_MLO_Wise_StockReport", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_WiseDaily_Inward_ConditionReport_Result> CSD_MLO_WiseDaily_Inward_ConditionReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_WiseDaily_Inward_ConditionReport_Result>("CSD_MLO_WiseDaily_Inward_ConditionReport", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_WiseDaily_InwardReport_Result> CSD_MLO_WiseDaily_InwardReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_WiseDaily_InwardReport_Result>("CSD_MLO_WiseDaily_InwardReport", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_WiseDaily_InwardTopReport_Result> CSD_MLO_WiseDaily_InwardTopReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_WiseDaily_InwardTopReport_Result>("CSD_MLO_WiseDaily_InwardTopReport", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_WiseDaily_OutwardReport_Result> CSD_MLO_WiseDaily_OutwardReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_WiseDaily_OutwardReport_Result>("CSD_MLO_WiseDaily_OutwardReport", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_WiseDaily_OutwardTopReport_Result> CSD_MLO_WiseDaily_OutwardTopReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_WiseDaily_OutwardTopReport_Result>("CSD_MLO_WiseDaily_OutwardTopReport", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CSD_MLOWise_BillReport_Result> CSD_MLOWise_BillReport(Nullable<int> clientId, string refNo)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLOWise_BillReport_Result>("CSD_MLOWise_BillReport", clientIdParameter, refNoParameter);
        }
    
        public virtual ObjectResult<CSD_Stock_MovementReport_Result> CSD_Stock_MovementReport(Nullable<int> clientId, Nullable<int> size, Nullable<int> type, Nullable<int> depotFrom)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(int));
    
            var depotFromParameter = depotFrom.HasValue ?
                new ObjectParameter("DepotFrom", depotFrom) :
                new ObjectParameter("DepotFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_Stock_MovementReport_Result>("CSD_Stock_MovementReport", clientIdParameter, sizeParameter, typeParameter, depotFromParameter);
        }
    
        public virtual int CSDMonthlyBILLProcess(Nullable<int> clientID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<decimal> vATPerchant)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var vATPerchantParameter = vATPerchant.HasValue ?
                new ObjectParameter("VATPerchant", vATPerchant) :
                new ObjectParameter("VATPerchant", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CSDMonthlyBILLProcess", clientIDParameter, fromdateParameter, todateParameter, vATPerchantParameter);
        }
    
        public virtual int CSDMonthlyBIllUpdate(Nullable<int> clientID, string refNo, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<decimal> vATPerchant)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var refNoParameter = refNo != null ?
                new ObjectParameter("RefNo", refNo) :
                new ObjectParameter("RefNo", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var vATPerchantParameter = vATPerchant.HasValue ?
                new ObjectParameter("VATPerchant", vATPerchant) :
                new ObjectParameter("VATPerchant", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CSDMonthlyBIllUpdate", clientIDParameter, refNoParameter, fromdateParameter, todateParameter, vATPerchantParameter);
        }
    
        public virtual int CSDOutBILLProcess(Nullable<int> clientID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<decimal> vATPerchant)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var vATPerchantParameter = vATPerchant.HasValue ?
                new ObjectParameter("VATPerchant", vATPerchant) :
                new ObjectParameter("VATPerchant", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CSDOutBILLProcess", clientIDParameter, fromdateParameter, todateParameter, vATPerchantParameter);
        }
    
        public virtual ObjectResult<EXPORT_ConsigneeWise_DailyReceiving_Result> EXPORT_ConsigneeWise_DailyReceiving(Nullable<int> consigneeId, string containerNo, string containerSize, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var consigneeIdParameter = consigneeId.HasValue ?
                new ObjectParameter("ConsigneeId", consigneeId) :
                new ObjectParameter("ConsigneeId", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var containerSizeParameter = containerSize != null ?
                new ObjectParameter("ContainerSize", containerSize) :
                new ObjectParameter("ContainerSize", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EXPORT_ConsigneeWise_DailyReceiving_Result>("EXPORT_ConsigneeWise_DailyReceiving", consigneeIdParameter, containerNoParameter, containerSizeParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<EXPORT_ConsigneeWise_DailyStatus_Result> EXPORT_ConsigneeWise_DailyStatus(Nullable<int> consigneeId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var consigneeIdParameter = consigneeId.HasValue ?
                new ObjectParameter("ConsigneeId", consigneeId) :
                new ObjectParameter("ConsigneeId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EXPORT_ConsigneeWise_DailyStatus_Result>("EXPORT_ConsigneeWise_DailyStatus", consigneeIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<EXPORT_ConsigneeWise_DailyStuffing_Result> EXPORT_ConsigneeWise_DailyStuffing(Nullable<int> consigneeId, Nullable<int> shipperId, Nullable<int> frieghtForwarderId, string eFRNO, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var consigneeIdParameter = consigneeId.HasValue ?
                new ObjectParameter("ConsigneeId", consigneeId) :
                new ObjectParameter("ConsigneeId", typeof(int));
    
            var shipperIdParameter = shipperId.HasValue ?
                new ObjectParameter("ShipperId", shipperId) :
                new ObjectParameter("ShipperId", typeof(int));
    
            var frieghtForwarderIdParameter = frieghtForwarderId.HasValue ?
                new ObjectParameter("frieghtForwarderId", frieghtForwarderId) :
                new ObjectParameter("frieghtForwarderId", typeof(int));
    
            var eFRNOParameter = eFRNO != null ?
                new ObjectParameter("EFRNO", eFRNO) :
                new ObjectParameter("EFRNO", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EXPORT_ConsigneeWise_DailyStuffing_Result>("EXPORT_ConsigneeWise_DailyStuffing", consigneeIdParameter, shipperIdParameter, frieghtForwarderIdParameter, eFRNOParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<EXPORT_TRReport_Result> EXPORT_TRReport(Nullable<int> tRId)
        {
            var tRIdParameter = tRId.HasValue ?
                new ObjectParameter("TRId", tRId) :
                new ObjectParameter("TRId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EXPORT_TRReport_Result>("EXPORT_TRReport", tRIdParameter);
        }
    
        public virtual ObjectResult<ExportMLOWiseServiceBillCalculation_Result> ExportMLOWiseServiceBillCalculation(Nullable<int> mLOId, Nullable<int> serviceId, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var mLOIdParameter = mLOId.HasValue ?
                new ObjectParameter("MLOId", mLOId) :
                new ObjectParameter("MLOId", typeof(int));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExportMLOWiseServiceBillCalculation_Result>("ExportMLOWiseServiceBillCalculation", mLOIdParameter, serviceIdParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<ExportStuffingDetails_Result> ExportStuffingDetails(Nullable<int> billType, Nullable<int> mloFordId, string eFRNo, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var mloFordIdParameter = mloFordId.HasValue ?
                new ObjectParameter("MloFordId", mloFordId) :
                new ObjectParameter("MloFordId", typeof(int));
    
            var eFRNoParameter = eFRNo != null ?
                new ObjectParameter("EFRNo", eFRNo) :
                new ObjectParameter("EFRNo", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExportStuffingDetails_Result>("ExportStuffingDetails", billTypeParameter, mloFordIdParameter, eFRNoParameter, fromdateParameter, todateParameter);
        }
    
        public virtual int GetAllCargoReceivingData(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllCargoReceivingData", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual ObjectResult<GetAllCSDBillDetails_Result> GetAllCSDBillDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCSDBillDetails_Result>("GetAllCSDBillDetails");
        }
    
        public virtual int GetAllCSDGateInOutData(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllCSDGateInOutData", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual int GetAllExportBill(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllExportBill", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual int GetAllIGMGateInData(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllIGMGateInData", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual int GetAllIGMGateOutData(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllIGMGateOutData", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual int GetAllIGMImport(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllIGMImport", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual int GetAllImportBill(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllImportBill", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual int GetAllMoneyReceipt(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllMoneyReceipt", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual ObjectResult<GetCompanyinfo_Result> GetCompanyinfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCompanyinfo_Result>("GetCompanyinfo");
        }
    
        public virtual ObjectResult<GetContainerHistory_Result> GetContainerHistory(Nullable<int> cSDId)
        {
            var cSDIdParameter = cSDId.HasValue ?
                new ObjectParameter("CSDId", cSDId) :
                new ObjectParameter("CSDId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetContainerHistory_Result>("GetContainerHistory", cSDIdParameter);
        }
    
        public virtual int GetCSDGateInData(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCSDGateInData", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual int GetCSDGateOutData(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCSDGateOutData", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual ObjectResult<GetImportMonthlyReceivingReport_Result> GetImportMonthlyReceivingReport(Nullable<int> clientId, Nullable<int> month)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var monthParameter = month.HasValue ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetImportMonthlyReceivingReport_Result>("GetImportMonthlyReceivingReport", clientIdParameter, monthParameter);
        }
    
        public virtual ObjectResult<GetMLOWiseContainerStatus_Result> GetMLOWiseContainerStatus(Nullable<int> clientId, string typeName, Nullable<System.DateTime> toDate, Nullable<System.DateTime> fromDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMLOWiseContainerStatus_Result>("GetMLOWiseContainerStatus", clientIdParameter, typeNameParameter, toDateParameter, fromDateParameter);
        }
    
        public virtual ObjectResult<GetMLOWiseDailyImportLadenStockSummary__Result> GetMLOWiseDailyImportLadenStockSummary_(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMLOWiseDailyImportLadenStockSummary__Result>("GetMLOWiseDailyImportLadenStockSummary_", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Import_ContainetSummary_Result> Import_ContainetSummary(Nullable<int> clientId, string containerNo, string containerSize, Nullable<int> sortBy, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var containerSizeParameter = containerSize != null ?
                new ObjectParameter("ContainerSize", containerSize) :
                new ObjectParameter("ContainerSize", typeof(string));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Import_ContainetSummary_Result>("Import_ContainetSummary", clientIdParameter, containerNoParameter, containerSizeParameter, sortByParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Import_MLO_Wise_DailyInOutStock_Result> Import_MLO_Wise_DailyInOutStock(Nullable<int> clientId, string containerNo, string containerSize, string blno, Nullable<int> commdityId, Nullable<int> importerId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> typeName)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var containerSizeParameter = containerSize != null ?
                new ObjectParameter("ContainerSize", containerSize) :
                new ObjectParameter("ContainerSize", typeof(string));
    
            var blnoParameter = blno != null ?
                new ObjectParameter("Blno", blno) :
                new ObjectParameter("Blno", typeof(string));
    
            var commdityIdParameter = commdityId.HasValue ?
                new ObjectParameter("commdityId", commdityId) :
                new ObjectParameter("commdityId", typeof(int));
    
            var importerIdParameter = importerId.HasValue ?
                new ObjectParameter("ImporterId", importerId) :
                new ObjectParameter("ImporterId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeNameParameter = typeName.HasValue ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Import_MLO_Wise_DailyInOutStock_Result>("Import_MLO_Wise_DailyInOutStock", clientIdParameter, containerNoParameter, containerSizeParameter, blnoParameter, commdityIdParameter, importerIdParameter, fromDateParameter, toDateParameter, typeNameParameter);
        }
    
        public virtual ObjectResult<Import_MLOWise_DailyReport_Result> Import_MLOWise_DailyReport(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Import_MLOWise_DailyReport_Result>("Import_MLOWise_DailyReport", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Import_MLOWise_ImportSummary_Result> Import_MLOWise_ImportSummary(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Import_MLOWise_ImportSummary_Result>("Import_MLOWise_ImportSummary", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ImportDeliveryPackageCalculation_Result> ImportDeliveryPackageCalculation(Nullable<int> iGMIdAgainstBl, Nullable<int> serviceId, Nullable<float> rateBDT, Nullable<System.DateTime> uptoDate)
        {
            var iGMIdAgainstBlParameter = iGMIdAgainstBl.HasValue ?
                new ObjectParameter("IGMIdAgainstBl", iGMIdAgainstBl) :
                new ObjectParameter("IGMIdAgainstBl", typeof(int));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("ServiceId", serviceId) :
                new ObjectParameter("ServiceId", typeof(int));
    
            var rateBDTParameter = rateBDT.HasValue ?
                new ObjectParameter("RateBDT", rateBDT) :
                new ObjectParameter("RateBDT", typeof(float));
    
            var uptoDateParameter = uptoDate.HasValue ?
                new ObjectParameter("UptoDate", uptoDate) :
                new ObjectParameter("UptoDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImportDeliveryPackageCalculation_Result>("ImportDeliveryPackageCalculation", iGMIdAgainstBlParameter, serviceIdParameter, rateBDTParameter, uptoDateParameter);
        }
    
        public virtual ObjectResult<ImportDetentionCalculation_Result> ImportDetentionCalculation(Nullable<int> iGMId, Nullable<int> freeday, Nullable<System.DateTime> uptoDate, Nullable<decimal> rateInTk)
        {
            var iGMIdParameter = iGMId.HasValue ?
                new ObjectParameter("IGMId", iGMId) :
                new ObjectParameter("IGMId", typeof(int));
    
            var freedayParameter = freeday.HasValue ?
                new ObjectParameter("freeday", freeday) :
                new ObjectParameter("freeday", typeof(int));
    
            var uptoDateParameter = uptoDate.HasValue ?
                new ObjectParameter("UptoDate", uptoDate) :
                new ObjectParameter("UptoDate", typeof(System.DateTime));
    
            var rateInTkParameter = rateInTk.HasValue ?
                new ObjectParameter("RateInTk", rateInTk) :
                new ObjectParameter("RateInTk", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ImportDetentionCalculation_Result>("ImportDetentionCalculation", iGMIdParameter, freedayParameter, uptoDateParameter, rateInTkParameter);
        }
    
        public virtual ObjectResult<MLOWiseDailyInwardReportCSD_Result> MLOWiseDailyInwardReportCSD(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MLOWiseDailyInwardReportCSD_Result>("MLOWiseDailyInwardReportCSD", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<PrintMoneyReceipt_Result> PrintMoneyReceipt(Nullable<int> mRId)
        {
            var mRIdParameter = mRId.HasValue ?
                new ObjectParameter("MRId", mRId) :
                new ObjectParameter("MRId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PrintMoneyReceipt_Result>("PrintMoneyReceipt", mRIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<CSD_MLO_DailyInwardMovementSummary_old_Result> CSD_MLO_DailyInwardMovementSummary_old(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_DailyInwardMovementSummary_old_Result>("CSD_MLO_DailyInwardMovementSummary_old", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_DailyOutwardMovementSummary_old_Result> CSD_MLO_DailyOutwardMovementSummary_old(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_DailyOutwardMovementSummary_old_Result>("CSD_MLO_DailyOutwardMovementSummary_old", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_Wise_DailyReport_old_Result> CSD_MLO_Wise_DailyReport_old(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> typeName)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeNameParameter = typeName.HasValue ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_Wise_DailyReport_old_Result>("CSD_MLO_Wise_DailyReport_old", clientIdParameter, fromDateParameter, toDateParameter, typeNameParameter);
        }
    
        public virtual ObjectResult<CSD_Monthly_AllClient_BILLProcess_Result> CSD_Monthly_AllClient_BILLProcess(Nullable<int> clientID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<decimal> vATPerchant)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var vATPerchantParameter = vATPerchant.HasValue ?
                new ObjectParameter("VATPerchant", vATPerchant) :
                new ObjectParameter("VATPerchant", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_Monthly_AllClient_BILLProcess_Result>("CSD_Monthly_AllClient_BILLProcess", clientIDParameter, fromdateParameter, todateParameter, vATPerchantParameter);
        }
    
        public virtual int CSDMonthlyBillDetailsExport(Nullable<int> cusId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CSDMonthlyBillDetailsExport", cusIdParameter, fromDateParameter, todateParameter);
        }
    
        public virtual int CSDMonthlyBillDetailsExportToGetSummery(Nullable<int> cusId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CSDMonthlyBillDetailsExportToGetSummery", cusIdParameter, fromDateParameter, todateParameter);
        }
    
        public virtual ObjectResult<CSDMonthlyBILLProcess_x_14092019_Result> CSDMonthlyBILLProcess_x_14092019(Nullable<int> clientID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<decimal> vATPerchant)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var vATPerchantParameter = vATPerchant.HasValue ?
                new ObjectParameter("VATPerchant", vATPerchant) :
                new ObjectParameter("VATPerchant", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSDMonthlyBILLProcess_x_14092019_Result>("CSDMonthlyBILLProcess_x_14092019", clientIDParameter, fromdateParameter, todateParameter, vATPerchantParameter);
        }
    
        public virtual ObjectResult<CSDMonthlyBILLProcess_X_18092019_Result> CSDMonthlyBILLProcess_X_18092019(Nullable<int> clientID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<decimal> vATPerchant)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var vATPerchantParameter = vATPerchant.HasValue ?
                new ObjectParameter("VATPerchant", vATPerchant) :
                new ObjectParameter("VATPerchant", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSDMonthlyBILLProcess_X_18092019_Result>("CSDMonthlyBILLProcess_X_18092019", clientIDParameter, fromdateParameter, todateParameter, vATPerchantParameter);
        }
    
        public virtual ObjectResult<CSDMonthlyBILLProcess_X16092019_Result> CSDMonthlyBILLProcess_X16092019(Nullable<int> clientID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<decimal> vATPerchant)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var vATPerchantParameter = vATPerchant.HasValue ?
                new ObjectParameter("VATPerchant", vATPerchant) :
                new ObjectParameter("VATPerchant", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSDMonthlyBILLProcess_X16092019_Result>("CSDMonthlyBILLProcess_X16092019", clientIDParameter, fromdateParameter, todateParameter, vATPerchantParameter);
        }
    
        public virtual int sp_rdlc_AccountsBlancesheet(Nullable<System.DateTime> reportDate)
        {
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_rdlc_AccountsBlancesheet", reportDateParameter);
        }
    
        public virtual ObjectResult<sp_rdlc_AccountsLedger_Result> sp_rdlc_AccountsLedger(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> cOAID)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var cOAIDParameter = cOAID.HasValue ?
                new ObjectParameter("COAID", cOAID) :
                new ObjectParameter("COAID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_rdlc_AccountsLedger_Result>("sp_rdlc_AccountsLedger", startDateParameter, endDateParameter, cOAIDParameter);
        }
    
        public virtual ObjectResult<sp_rdlc_AccountsProfitAndLoss_Result> sp_rdlc_AccountsProfitAndLoss(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_rdlc_AccountsProfitAndLoss_Result>("sp_rdlc_AccountsProfitAndLoss", startDateParameter, endDateParameter);
        }
    
        public virtual ObjectResult<sp_rdlc_AccountsVoucher_Result> sp_rdlc_AccountsVoucher()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_rdlc_AccountsVoucher_Result>("sp_rdlc_AccountsVoucher");
        }
    
        public virtual ObjectResult<CSD_MLO_DailyInwardMovementSummary_old1_Result> CSD_MLO_DailyInwardMovementSummary_old1(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_DailyInwardMovementSummary_old1_Result>("CSD_MLO_DailyInwardMovementSummary_old1", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_DailyOutwardMovementSummary_old1_Result> CSD_MLO_DailyOutwardMovementSummary_old1(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_DailyOutwardMovementSummary_old1_Result>("CSD_MLO_DailyOutwardMovementSummary_old1", clientIdParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<CSD_MLO_Wise_DailyReport_old1_Result> CSD_MLO_Wise_DailyReport_old1(Nullable<int> clientId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> typeName)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var typeNameParameter = typeName.HasValue ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSD_MLO_Wise_DailyReport_old1_Result>("CSD_MLO_Wise_DailyReport_old1", clientIdParameter, fromDateParameter, toDateParameter, typeNameParameter);
        }
    
        public virtual int CSDMonthlyBillDetailsExportToGetSummery1(Nullable<int> cusId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CSDMonthlyBillDetailsExportToGetSummery1", cusIdParameter, fromDateParameter, todateParameter);
        }
    
        public virtual ObjectResult<Export_DaililyContainerStuffingSummary_Result> Export_DaililyContainerStuffingSummary(Nullable<int> clientId, string containerNo, string containerSize, string containerType, Nullable<int> sortBy, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var containerSizeParameter = containerSize != null ?
                new ObjectParameter("ContainerSize", containerSize) :
                new ObjectParameter("ContainerSize", typeof(string));
    
            var containerTypeParameter = containerType != null ?
                new ObjectParameter("ContainerType", containerType) :
                new ObjectParameter("ContainerType", typeof(string));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Export_DaililyContainerStuffingSummary_Result>("Export_DaililyContainerStuffingSummary", clientIdParameter, containerNoParameter, containerSizeParameter, containerTypeParameter, sortByParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<Get_Indate_and_Size_and_BL_WiseSummery_Result> Get_Indate_and_Size_and_BL_WiseSummery(string blnumber)
        {
            var blnumberParameter = blnumber != null ?
                new ObjectParameter("Blnumber", blnumber) :
                new ObjectParameter("Blnumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Indate_and_Size_and_BL_WiseSummery_Result>("Get_Indate_and_Size_and_BL_WiseSummery", blnumberParameter);
        }
    
        public virtual ObjectResult<Get_Indatewise_ImportContainer_Position_Result> Get_Indatewise_ImportContainer_Position(string blnumber)
        {
            var blnumberParameter = blnumber != null ?
                new ObjectParameter("Blnumber", blnumber) :
                new ObjectParameter("Blnumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_Indatewise_ImportContainer_Position_Result>("Get_Indatewise_ImportContainer_Position", blnumberParameter);
        }
    
        public virtual ObjectResult<string> sp_GetPatternConfig(string configType)
        {
            var configTypeParameter = configType != null ?
                new ObjectParameter("ConfigType", configType) :
                new ObjectParameter("ConfigType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_GetPatternConfig", configTypeParameter);
        }
    
        public virtual int GetAllImportBillforApprove(Nullable<int> pageIndex, Nullable<int> pageSize, ObjectParameter recordCount)
        {
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAllImportBillforApprove", pageIndexParameter, pageSizeParameter, recordCount);
        }
    
        public virtual int CSDMonthlyBillDetailsExportwithTop(Nullable<int> cusId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CSDMonthlyBillDetailsExportwithTop", cusIdParameter, fromDateParameter, todateParameter);
        }
    
        public virtual ObjectResult<CSDMonthlyBillDetailsMLOTopSheet_Result> CSDMonthlyBillDetailsMLOTopSheet(Nullable<int> cusId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CSDMonthlyBillDetailsMLOTopSheet_Result>("CSDMonthlyBillDetailsMLOTopSheet", cusIdParameter, fromDateParameter, todateParameter);
        }
    
        public virtual int CSDMonthlyBillSummery(Nullable<int> cusId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> todate)
        {
            var cusIdParameter = cusId.HasValue ?
                new ObjectParameter("CusId", cusId) :
                new ObjectParameter("CusId", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CSDMonthlyBillSummery", cusIdParameter, fromDateParameter, todateParameter);
        }
    
        public virtual ObjectResult<Export_StuffingSummaryForBill_Result> Export_StuffingSummaryForBill(Nullable<int> clientId, Nullable<int> sortBy, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(int));
    
            var sortByParameter = sortBy.HasValue ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Export_StuffingSummaryForBill_Result>("Export_StuffingSummaryForBill", clientIdParameter, sortByParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<ExportStuffingDetailsWithService_Result> ExportStuffingDetailsWithService(Nullable<int> billType, Nullable<int> mloFordId, string eFRNo, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate)
        {
            var billTypeParameter = billType.HasValue ?
                new ObjectParameter("BillType", billType) :
                new ObjectParameter("BillType", typeof(int));
    
            var mloFordIdParameter = mloFordId.HasValue ?
                new ObjectParameter("MloFordId", mloFordId) :
                new ObjectParameter("MloFordId", typeof(int));
    
            var eFRNoParameter = eFRNo != null ?
                new ObjectParameter("EFRNo", eFRNo) :
                new ObjectParameter("EFRNo", typeof(string));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExportStuffingDetailsWithService_Result>("ExportStuffingDetailsWithService", billTypeParameter, mloFordIdParameter, eFRNoParameter, fromdateParameter, todateParameter);
        }
    
        public virtual ObjectResult<Export_MLO_FFarwarder_SummeryGrid_Result> Export_MLO_FFarwarder_SummeryGrid(Nullable<int> mLOID, Nullable<int> fFId, Nullable<System.DateTime> fromStuffingdate, Nullable<System.DateTime> tostuffingdate)
        {
            var mLOIDParameter = mLOID.HasValue ?
                new ObjectParameter("MLOID", mLOID) :
                new ObjectParameter("MLOID", typeof(int));
    
            var fFIdParameter = fFId.HasValue ?
                new ObjectParameter("FFId", fFId) :
                new ObjectParameter("FFId", typeof(int));
    
            var fromStuffingdateParameter = fromStuffingdate.HasValue ?
                new ObjectParameter("fromStuffingdate", fromStuffingdate) :
                new ObjectParameter("fromStuffingdate", typeof(System.DateTime));
    
            var tostuffingdateParameter = tostuffingdate.HasValue ?
                new ObjectParameter("Tostuffingdate", tostuffingdate) :
                new ObjectParameter("Tostuffingdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Export_MLO_FFarwarder_SummeryGrid_Result>("Export_MLO_FFarwarder_SummeryGrid", mLOIDParameter, fFIdParameter, fromStuffingdateParameter, tostuffingdateParameter);
        }
    
        public virtual ObjectResult<Export_MLO_FFarwarder_SummeryGridSum_Result> Export_MLO_FFarwarder_SummeryGridSum(Nullable<int> mLOID, Nullable<int> fFId, Nullable<System.DateTime> fromStuffingdate, Nullable<System.DateTime> tostuffingdate)
        {
            var mLOIDParameter = mLOID.HasValue ?
                new ObjectParameter("MLOID", mLOID) :
                new ObjectParameter("MLOID", typeof(int));
    
            var fFIdParameter = fFId.HasValue ?
                new ObjectParameter("FFId", fFId) :
                new ObjectParameter("FFId", typeof(int));
    
            var fromStuffingdateParameter = fromStuffingdate.HasValue ?
                new ObjectParameter("fromStuffingdate", fromStuffingdate) :
                new ObjectParameter("fromStuffingdate", typeof(System.DateTime));
    
            var tostuffingdateParameter = tostuffingdate.HasValue ?
                new ObjectParameter("Tostuffingdate", tostuffingdate) :
                new ObjectParameter("Tostuffingdate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Export_MLO_FFarwarder_SummeryGridSum_Result>("Export_MLO_FFarwarder_SummeryGridSum", mLOIDParameter, fFIdParameter, fromStuffingdateParameter, tostuffingdateParameter);
        }
    }
}
